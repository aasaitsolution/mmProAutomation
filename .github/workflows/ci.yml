name: Selenium CI with Manual Trend Generation

on:
  push:
    branches: [ "main" ]
  pull_request:

jobs:
  test-and-report:
    runs-on: ubuntu-latest
    
    steps:
      # 1. Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. Set up Java
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Install Chrome & ChromeDriver
      - name: Install Chrome & ChromeDriver
        run: |
          sudo apt-get update
          sudo apt-get install -y chromium-browser chromium-chromedriver

      # 4. Get history from gh-pages
      - name: Get Allure history
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages
        continue-on-error: true

      # 5. Prepare history and create proper trend data
      - name: Prepare Allure history with manual trend generation
        run: |
          mkdir -p target/allure-results/history
          
          # Copy existing history
          if [ -d "gh-pages/history" ]; then
            echo "Copying existing history..."
            cp -r gh-pages/history/* target/allure-results/history/
          fi
          
          # Create executor.json
          cat > target/allure-results/executor.json << EOF
          {
            "name": "GitHub Actions",
            "type": "github", 
            "url": "${{ github.server_url }}/${{ github.repository }}",
            "buildOrder": ${{ github.run_number }},
            "buildName": "Build #${{ github.run_number }}",
            "buildUrl": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "reportName": "Allure Report #${{ github.run_number }}",
            "reportUrl": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }
          EOF

      # 6. Run tests
      - name: Run Tests
        run: |
          mvn clean test -Dmaven.test.failure.ignore=true

      # 7. Install Allure and jq for JSON processing
      - name: Install Allure CLI and jq
        run: |
          ALLURE_VERSION=2.25.0
          wget https://github.com/allure-framework/allure2/releases/download/$ALLURE_VERSION/allure-$ALLURE_VERSION.tgz
          tar -zxvf allure-$ALLURE_VERSION.tgz -C $HOME/
          echo "$HOME/allure-$ALLURE_VERSION/bin" >> $GITHUB_PATH
          sudo apt-get install -y jq

      # 8. Generate report and fix trend data
      - name: Generate Report and Fix Trend Data
        run: |
          # Generate initial report
          allure generate target/allure-results -o target/allure-report --clean
          
          # Get current test statistics
          PASSED=$(find target/allure-results -name "*.json" -exec grep -l '"status":"passed"' {} \; | wc -l)
          FAILED=$(find target/allure-results -name "*.json" -exec grep -l '"status":"failed"' {} \; | wc -l)
          BROKEN=$(find target/allure-results -name "*.json" -exec grep -l '"status":"broken"' {} \; | wc -l)
          SKIPPED=$(find target/allure-results -name "*.json" -exec grep -l '"status":"skipped"' {} \; | wc -l)
          TOTAL=$((PASSED + FAILED + BROKEN + SKIPPED))
          
          echo "Current run stats: P=$PASSED, F=$FAILED, B=$BROKEN, S=$SKIPPED, T=$TOTAL"
          
          # Create proper trend data with buildOrder
          BUILD_ORDER=${{ github.run_number }}
          REPORT_NAME="Build #$BUILD_ORDER"
          REPORT_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          # Fix history-trend.json
          echo "Fixing history-trend.json..."
          if [ -f "target/allure-report/history/history-trend.json" ]; then
            # Get existing trend data
            EXISTING_TRENDS=$(cat target/allure-report/history/history-trend.json)
            
            # Create new trend entry
            NEW_TREND=$(jq -n \
              --argjson buildOrder "$BUILD_ORDER" \
              --arg reportName "$REPORT_NAME" \
              --arg reportUrl "$REPORT_URL" \
              --argjson passed "$PASSED" \
              --argjson failed "$FAILED" \
              --argjson broken "$BROKEN" \
              --argjson skipped "$SKIPPED" \
              --argjson total "$TOTAL" \
              '{
                "buildOrder": $buildOrder,
                "reportName": $reportName,
                "reportUrl": $reportUrl,
                "data": {
                  "passed": $passed,
                  "failed": $failed,
                  "broken": $broken,
                  "skipped": $skipped,
                  "unknown": 0,
                  "total": $total
                }
              }')
            
            # Combine with existing trends
            if [ "$EXISTING_TRENDS" != "[]" ] && [ -n "$EXISTING_TRENDS" ]; then
              COMBINED_TRENDS=$(echo "$EXISTING_TRENDS" | jq --argjson newTrend "$NEW_TREND" '. + [$newTrend]')
            else
              COMBINED_TRENDS="[$NEW_TREND]"
            fi
            
            # Write fixed trend data
            echo "$COMBINED_TRENDS" > target/allure-report/history/history-trend.json
            echo "Fixed history-trend.json:"
            cat target/allure-report/history/history-trend.json
          else
            echo "Creating new history-trend.json..."
            jq -n \
              --argjson buildOrder "$BUILD_ORDER" \
              --arg reportName "$REPORT_NAME" \
              --arg reportUrl "$REPORT_URL" \
              --argjson passed "$PASSED" \
              --argjson failed "$FAILED" \
              --argjson broken "$BROKEN" \
              --argjson skipped "$SKIPPED" \
              --argjson total "$TOTAL" \
              '[{
                "buildOrder": $buildOrder,
                "reportName": $reportName,
                "reportUrl": $reportUrl,
                "data": {
                  "passed": $passed,
                  "failed": $failed,
                  "broken": $broken,
                  "skipped": $skipped,
                  "unknown": 0,
                  "total": $total
                }
              }]' > target/allure-report/history/history-trend.json
          fi
          
          # Create duration-trend.json with better error handling
          echo "Creating duration-trend.json..."
          DURATION=0
          if find target/allure-results -name "*.json" -type f | head -1 | xargs -I {} test -f {}; then
            # Calculate total duration from test results
            DURATION=$(find target/allure-results -name "*-result.json" -exec grep -o '"duration":[0-9]*' {} \; 2>/dev/null | cut -d: -f2 | awk '{sum += $1} END {print sum+0}')
          fi
          echo "Calculated duration: $DURATION"
          
          # Get existing duration trends
          if [ -f "target/allure-report/history/duration-trend.json" ]; then
            EXISTING_DURATION_TRENDS=$(cat target/allure-report/history/duration-trend.json)
            NEW_DURATION_TREND=$(jq -n \
              --argjson buildOrder "$BUILD_ORDER" \
              --arg reportName "$REPORT_NAME" \
              --arg reportUrl "$REPORT_URL" \
              --argjson duration "$DURATION" \
              '{
                "buildOrder": $buildOrder,
                "reportName": $reportName,
                "reportUrl": $reportUrl,
                "data": {"duration": $duration}
              }')
            
            if [ "$EXISTING_DURATION_TRENDS" != "[]" ] && [ -n "$EXISTING_DURATION_TRENDS" ]; then
              COMBINED_DURATION_TRENDS=$(echo "$EXISTING_DURATION_TRENDS" | jq --argjson newTrend "$NEW_DURATION_TREND" '. + [$newTrend]')
            else
              COMBINED_DURATION_TRENDS="[$NEW_DURATION_TREND]"
            fi
            echo "$COMBINED_DURATION_TRENDS" > target/allure-report/history/duration-trend.json
          else
            jq -n \
              --argjson buildOrder "$BUILD_ORDER" \
              --arg reportName "$REPORT_NAME" \
              --arg reportUrl "$REPORT_URL" \
              --argjson duration "$DURATION" \
              '[{
                "buildOrder": $buildOrder,
                "reportName": $reportName,
                "reportUrl": $reportUrl,
                "data": {"duration": $duration}
              }]' > target/allure-report/history/duration-trend.json
          fi
          
          echo "Created trend files with buildOrder: $BUILD_ORDER"
          echo "Final history-trend.json:"
          cat target/allure-report/history/history-trend.json
          echo "Final duration-trend.json:"  
          cat target/allure-report/history/duration-trend.json

      # 9. Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: target/allure-report
          keep_files: false

      # 10. Upload artifact
      - name: Upload Allure Report
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-${{ github.run_number }}
          path: target/allure-report

      # 11. Deploy to SLT server
      - name: Deploy Allure Report with rsync
        uses: burnett01/rsync-deployments@6.0.0
        with:
          switches: -avzr --delete
          path: target/allure-report/
          remote_path: /var/www/html/selenium-report
          remote_host: ${{ secrets.SLT_HOST }}
          remote_user: ${{ secrets.SLT_USER }}
          remote_key: ${{ secrets.SSH_PRIVATE_KEY }}
