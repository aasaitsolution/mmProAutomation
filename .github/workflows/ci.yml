name: Selenium Tests with Complete Allure History

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test-and-report:
    runs-on: ubuntu-latest
    
    steps:
      # 1. Checkout code with full history
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. Set up Java
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      # 3. Install Chrome & ChromeDriver
      - name: Install Chrome & ChromeDriver
        run: |
          sudo apt-get update
          sudo apt-get install -y chromium-browser chromium-chromedriver

      # 4. Download previous Allure history from gh-pages
      - name: Download Allure History
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages-history
        continue-on-error: true

      # 5. Prepare Allure directories and restore history
      - name: Setup Allure Directories and History
        run: |
          echo "=== Setting up Allure directories ==="
          mkdir -p target/allure-results/history
          mkdir -p target/allure-report/history
          
          # Copy history from previous runs if available
          if [ -d "gh-pages-history/history" ]; then
            echo "Restoring Allure history from previous runs..."
            cp -r gh-pages-history/history/* target/allure-results/history/ 2>/dev/null || true
            echo "History files restored:"
            ls -la target/allure-results/history/ || echo "No history files found"
          else
            echo "No previous history found, starting fresh"
          fi
          
          # Create environment.properties for this build
          cat > target/allure-results/environment.properties << EOF
          Browser=Chrome
          Environment=GitHub Actions
          OS=Ubuntu Latest
          Build.Number=${{ github.run_number }}
          Build.Url=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          Branch=${{ github.ref_name }}
          Commit=${{ github.sha }}
          Timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          EOF
          
          # Create executor.json for build information
          cat > target/allure-results/executor.json << EOF
          {
            "name": "GitHub Actions",
            "type": "github",
            "url": "${{ github.server_url }}/${{ github.repository }}",
            "buildOrder": ${{ github.run_number }},
            "buildName": "Build #${{ github.run_number }}",
            "buildUrl": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "reportName": "Allure Report #${{ github.run_number }}",
            "reportUrl": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }
          EOF

      # 6. Run Maven tests
      - name: Run Tests
        run: |
          echo "=== Running Maven Tests ==="
          mvn clean test -Dmaven.test.failure.ignore=true
          
          echo "=== Test Results Generated ==="
          ls -la target/allure-results/

      # 7. Install Allure CLI
      - name: Install Allure CLI
        run: |
          ALLURE_VERSION=2.25.0
          echo "Installing Allure CLI version $ALLURE_VERSION"
          wget -q https://github.com/allure-framework/allure2/releases/download/$ALLURE_VERSION/allure-$ALLURE_VERSION.tgz
          tar -zxf allure-$ALLURE_VERSION.tgz -C $HOME/
          echo "$HOME/allure-$ALLURE_VERSION/bin" >> $GITHUB_PATH
          
          # Install jq for JSON processing
          sudo apt-get install -y jq

      # 8. Generate Allure Report with History (following your local workflow)
      - name: Generate Allure Report with History
        run: |
          echo "=== Step 1: Generate initial report ==="
          allure generate target/allure-results --clean -o target/allure-report
          
          echo "=== Step 2: Copy history back to results (your local workflow) ==="
          # This is the key step from your local workflow
          mkdir -p target/allure-results/history
          if [ -d "target/allure-report/history" ]; then
            cp -r target/allure-report/history/. target/allure-results/history/
            echo "History copied from report to results"
            ls -la target/allure-results/history/
          fi
          
          echo "=== Step 3: Regenerate report with complete history ==="
          allure generate target/allure-results --clean -o target/allure-report
          
          echo "=== Step 4: Verify history preservation ==="
          if [ -f "target/allure-report/history/history-trend.json" ]; then
            HISTORY_COUNT=$(jq length target/allure-report/history/history-trend.json)
            echo "✅ History preserved with $HISTORY_COUNT entries"
            echo "Latest entries:"
            jq '.[-2:]' target/allure-report/history/history-trend.json || echo "Could not display entries"
          else
            echo "⚠️ No history-trend.json found"
          fi
          
          echo "=== Final report structure ==="
          ls -la target/allure-report/
          ls -la target/allure-report/history/ 2>/dev/null || echo "No history directory in report"

      # 9. Create comprehensive history backup
      - name: Backup Complete History
        run: |
          echo "=== Creating comprehensive history backup ==="
          mkdir -p history-backup
          
          # Copy all history files
          if [ -d "target/allure-report/history" ]; then
            cp -r target/allure-report/history/* history-backup/ 2>/dev/null || true
          fi
          
          # Also backup from results directory
          if [ -d "target/allure-results/history" ]; then
            cp -r target/allure-results/history/* history-backup/ 2>/dev/null || true
          fi
          
          echo "History backup contents:"
          ls -la history-backup/ || echo "No history backup created"
          
          # Verify history files
          for file in history-backup/*.json; do
            if [ -f "$file" ]; then
              echo "$(basename $file): $(jq length "$file" 2>/dev/null || echo "invalid") entries"
            fi
          done

      # 10. Enhanced Deploy to GitHub Pages with history preservation
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: target/allure-report
          keep_files: false
          force_orphan: false
          # Ensure history is preserved by copying it to the publish directory
          
      # 11. Deploy to SLT Server
      - name: Deploy to SLT Server
        if: always()
        uses: burnett01/rsync-deployments@6.0.0
        with:
          switches: -avzr --delete --exclude='.git*' --exclude='*.log'
          path: target/allure-report/
          remote_path: /var/www/html/selenium-report
          remote_host: ${{ secrets.SLT_HOST }}
          remote_user: ${{ secrets.SLT_USER }}
          remote_key: ${{ secrets.SSH_PRIVATE_KEY }}

      # 12. Upload Allure Report as Artifact
      - name: Upload Allure Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-report-build-${{ github.run_number }}
          path: target/allure-report
          retention-days: 30

      # 13. Upload History Backup as Artifact
      - name: Upload History Backup
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-history-build-${{ github.run_number }}
          path: history-backup
          retention-days: 90

      # 14. Create Detailed Status Report
      - name: Generate Status Report
        if: always()
        run: |
          echo "=== ALLURE HISTORY STATUS REPORT ==="
          echo "Build Number: ${{ github.run_number }}"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Timestamp: $(date)"
          echo ""
          
          echo "=== DIRECTORY STRUCTURE ==="
          echo "Results directory:"
          ls -la target/allure-results/ || echo "No results directory"
          echo ""
          echo "Results history:"
          ls -la target/allure-results/history/ || echo "No results history"
          echo ""
          echo "Report directory:"
          ls -la target/allure-report/ || echo "No report directory"
          echo ""
          echo "Report history:"
          ls -la target/allure-report/history/ || echo "No report history"
          echo ""
          
          echo "=== HISTORY ANALYSIS ==="
          if [ -f "target/allure-report/history/history-trend.json" ]; then
            TOTAL_ENTRIES=$(jq length target/allure-report/history/history-trend.json)
            echo "✅ History trend entries: $TOTAL_ENTRIES"
            
            if [ "$TOTAL_ENTRIES" -gt 1 ]; then
              echo "✅ Multi-build history detected!"
              echo "Build numbers in history:"
              jq -r '.[] | "Build #" + (.buildOrder | tostring)' target/allure-report/history/history-trend.json
            else
              echo "⚠️ Only current build in history"
            fi
            
            echo ""
            echo "Latest entry:"
            jq '.[-1]' target/allure-report/history/history-trend.json
          else
            echo "❌ No history-trend.json found"
          fi
          
          echo ""
          echo "=== TEST SUMMARY ==="
          if [ -f "target/allure-report/widgets/summary.json" ]; then
            jq -r '"Total: " + (.statistic.total | tostring) + 
                   " | Passed: " + (.statistic.passed | tostring) + 
                   " | Failed: " + (.statistic.failed | tostring) + 
                   " | Skipped: " + (.statistic.skipped | tostring)' target/allure-report/widgets/summary.json
          else
            echo "No summary available"
          fi
          
          echo ""
          echo "=== REPORT URLS ==="
          echo "GitHub Pages: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
          echo "GitHub Actions: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          # Save status to file for potential future use
          cat > target/allure-report/build-status.json << EOF
          {
            "buildNumber": ${{ github.run_number }},
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "historyEntries": $(jq length target/allure-report/history/history-trend.json 2>/dev/null || echo 0),
            "reportUrl": "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/",
            "actionUrl": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }
          EOF

      # 15. Comment on PR with results (if this is a PR)
      - name: Comment PR with Test Results
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            
            try {
              const summaryPath = 'target/allure-report/widgets/summary.json';
              const statusPath = 'target/allure-report/build-status.json';
              
              if (fs.existsSync(summaryPath) && fs.existsSync(statusPath)) {
                const summary = JSON.parse(fs.readFileSync(summaryPath, 'utf8'));
                const status = JSON.parse(fs.readFileSync(statusPath, 'utf8'));
                
                const body = `## 🧪 Test Results - Build #${status.buildNumber}
            
            | Status | Count |
            |--------|-------|
            | ✅ Passed | ${summary.statistic.passed} |
            | ❌ Failed | ${summary.statistic.failed} |
            | 🔶 Broken | ${summary.statistic.broken || 0} |
            | ⏭️ Skipped | ${summary.statistic.skipped} |
            | **📊 Total** | **${summary.statistic.total}** |
            
            🕒 Duration: ${Math.round(summary.time.duration / 1000)}s
            📈 History Entries: ${status.historyEntries}
            
            📋 [View Full Report](${status.reportUrl})
            🔗 [GitHub Action](${status.actionUrl})`;
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: body
                });
              }
            } catch (error) {
              console.log('Could not create PR comment:', error.message);
            }
