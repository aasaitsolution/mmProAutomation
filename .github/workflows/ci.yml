name: Selenium Tests with Allure Report

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test_and_report:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full history for better Allure reports

      # 2. Checkout gh-pages branch for Allure history
      - name: Checkout gh-pages branch for Allure history
        uses: actions/checkout@v4
        if: always()  # Run even if tests fail
        with:
          ref: gh-pages
          path: gh-pages
          fetch-depth: 1

      # 3. Set up Java
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      # 4. Install Chrome & ChromeDriver
      - name: Install Chrome & ChromeDriver
        run: |
          sudo apt-get update
          sudo apt-get install -y chromium-browser chromium-chromedriver
          
          # Verify installation
          chromium-browser --version
          chromedriver --version

      # 5. Create Allure environment info
      - name: Create Allure Environment
        run: |
          mkdir -p target/allure-results
          
          # Create environment.properties for Allure
          cat > target/allure-results/environment.properties << EOF
          Browser=Chrome (Chromium)
          Environment=GitHub Actions
          OS=Ubuntu Latest
          Java.Version=17
          Build.Number=${{ github.run_number }}
          Build.Url=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          Branch=${{ github.ref_name }}
          Commit=${{ github.sha }}
          Timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          EOF
          
          # Create executor.json for build information
          cat > target/allure-results/executor.json << EOF
          {
            "name": "GitHub Actions",
            "type": "github", 
            "url": "${{ github.server_url }}/${{ github.repository }}",
            "buildOrder": ${{ github.run_number }},
            "buildName": "Build #${{ github.run_number }}",
            "buildUrl": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "reportName": "Selenium Tests Report #${{ github.run_number }}",
            "reportUrl": "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
          }
          EOF
          
          echo "‚úÖ Allure environment configured"

      # 6. Run Maven tests with Allure
      - name: Run Selenium Tests
        run: |
          echo "üöÄ Starting Selenium tests with Allure reporting..."
          mvn clean test -Dmaven.test.failure.ignore=true
          
          echo "üìä Test execution completed"
          echo "Generated Allure results:"
          ls -la target/allure-results/ || echo "No results directory found"
          
          # Count result files
          RESULT_COUNT=$(find target/allure-results -name "*.json" | wc -l)
          echo "üìà Generated $RESULT_COUNT Allure result files"
        continue-on-error: true  # Continue pipeline even if tests fail

      # 7. Generate Allure Report with History
      - name: Generate Allure Report with History
        uses: simple-elf/allure-report-action@v1.7
        if: always()  # Run even if tests fail
        with:
          allure_results: target/allure-results
          gh_pages: gh-pages
          allure_history: allure-history
          keep_reports: 20  # Keep last 20 reports in history
          
      # 8. Upload Allure Results as Artifact
      - name: Upload Allure Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-results-${{ github.run_number }}
          path: target/allure-results/
          retention-days: 30

      # 9. Upload Generated Report as Artifact  
      - name: Upload Allure Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-report-${{ github.run_number }}
          path: allure-history/
          retention-days: 30

      # 10. Deploy to GitHub Pages
      - name: Deploy Report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: always()  # Run even if tests fail
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: allure-history
          keep_files: false
          force_orphan: false

      # 11. Deploy to SLT Server (if configured)
      - name: Deploy to SLT Server
        if: always() && vars.DEPLOY_TO_SLT == 'true'
        uses: burnett01/rsync-deployments@6.0.0
        continue-on-error: true
        with:
          switches: -avzr --delete --exclude='.git*' --exclude='*.log'
          path: allure-history/
          remote_path: /var/www/html/selenium-report
          remote_host: ${{ secrets.SLT_HOST }}
          remote_user: ${{ secrets.SLT_USER }}
          remote_key: ${{ secrets.SSH_PRIVATE_KEY }}

      # 12. Generate Test Summary
      - name: Generate Test Summary
        if: always()
        run: |
          echo "=== SELENIUM TEST SUMMARY ===" | tee -a $GITHUB_STEP_SUMMARY
          echo "**Build:** #${{ github.run_number }}" | tee -a $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" | tee -a $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" | tee -a $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u)" | tee -a $GITHUB_STEP_SUMMARY
          echo "" | tee -a $GITHUB_STEP_SUMMARY
          
          # Check if report was generated
          if [ -f "allure-history/index.html" ]; then
            echo "‚úÖ **Allure Report Generated Successfully**" | tee -a $GITHUB_STEP_SUMMARY
            
            # Try to extract test statistics from the report
            if [ -f "allure-history/widgets/summary.json" ]; then
              echo "üìä **Test Statistics:**" | tee -a $GITHUB_STEP_SUMMARY
              
              # Use jq if available, otherwise basic parsing
              if command -v jq >/dev/null 2>&1; then
                TOTAL=$(jq -r '.statistic.total // 0' allure-history/widgets/summary.json)
                PASSED=$(jq -r '.statistic.passed // 0' allure-history/widgets/summary.json)
                FAILED=$(jq -r '.statistic.failed // 0' allure-history/widgets/summary.json)
                SKIPPED=$(jq -r '.statistic.skipped // 0' allure-history/widgets/summary.json)
                DURATION=$(jq -r '.time.duration // 0' allure-history/widgets/summary.json)
                DURATION_SEC=$((DURATION / 1000))
                
                echo "- **Total Tests:** $TOTAL" | tee -a $GITHUB_STEP_SUMMARY
                echo "- **‚úÖ Passed:** $PASSED" | tee -a $GITHUB_STEP_SUMMARY
                echo "- **‚ùå Failed:** $FAILED" | tee -a $GITHUB_STEP_SUMMARY
                echo "- **‚è≠Ô∏è Skipped:** $SKIPPED" | tee -a $GITHUB_STEP_SUMMARY
                echo "- **‚è±Ô∏è Duration:** ${DURATION_SEC}s" | tee -a $GITHUB_STEP_SUMMARY
                
                # Status indicator
                if [ "$FAILED" -eq 0 ]; then
                  echo "- **üéâ Status:** All tests passed!" | tee -a $GITHUB_STEP_SUMMARY
                else
                  echo "- **‚ö†Ô∏è Status:** $FAILED test(s) failed" | tee -a $GITHUB_STEP_SUMMARY
                fi
              else
                echo "- Statistics available in full report" | tee -a $GITHUB_STEP_SUMMARY
              fi
            fi
            
            echo "" | tee -a $GITHUB_STEP_SUMMARY
            echo "üîó **Links:**" | tee -a $GITHUB_STEP_SUMMARY
            echo "- [üìã View Full Report](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/)" | tee -a $GITHUB_STEP_SUMMARY
            echo "- [üîÑ GitHub Action](https://${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" | tee -a $GITHUB_STEP_SUMMARY
            
            # Check for history
            if [ -f "allure-history/history/history-trend.json" ] && command -v jq >/dev/null 2>&1; then
              HISTORY_COUNT=$(jq length allure-history/history/history-trend.json 2>/dev/null || echo "0")
              if [ "$HISTORY_COUNT" -gt 1 ]; then
                echo "- [üìà Historical Trends](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/#/graph) (${HISTORY_COUNT} builds)" | tee -a $GITHUB_STEP_SUMMARY
              fi
            fi
          else
            echo "‚ùå **Allure Report Generation Failed**" | tee -a $GITHUB_STEP_SUMMARY
            echo "Check the workflow logs for details." | tee -a $GITHUB_STEP_SUMMARY
          fi

      # 13. Comment on PR with Results
      - name: Comment PR with Test Results
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request' && always()
        with:
          script: |
            const fs = require('fs');
            
            try {
              let summary = '';
              let status = '‚ö†Ô∏è';
              
              // Check if report was generated
              if (fs.existsSync('allure-history/index.html')) {
                status = '‚úÖ';
                summary = 'Allure report generated successfully';
                
                // Try to get test statistics
                if (fs.existsSync('allure-history/widgets/summary.json')) {
                  const summaryData = JSON.parse(fs.readFileSync('allure-history/widgets/summary.json', 'utf8'));
                  
                  const total = summaryData.statistic?.total || 0;
                  const passed = summaryData.statistic?.passed || 0;
                  const failed = summaryData.statistic?.failed || 0;
                  const skipped = summaryData.statistic?.skipped || 0;
                  const duration = Math.round((summaryData.time?.duration || 0) / 1000);
                  
                  status = failed > 0 ? '‚ùå' : '‚úÖ';
                  
                  let historyInfo = '';
                  if (fs.existsSync('allure-history/history/history-trend.json')) {
                    const history = JSON.parse(fs.readFileSync('allure-history/history/history-trend.json', 'utf8'));
                    historyInfo = `üìà **Historical builds:** ${history.length}`;
                  }
                  
                  const body = `## ${status} Selenium Test Results - Build #${{ github.run_number }}
            
            ### üìä Test Statistics
            | Status | Count |
            |--------|-------|
            | ‚úÖ Passed | ${passed} |
            | ‚ùå Failed | ${failed} |
            | ‚è≠Ô∏è Skipped | ${skipped} |
            | **üìä Total** | **${total}** |
            
            **‚è±Ô∏è Duration:** ${duration}s  
            ${historyInfo}
            
            ### üîó Links
            - üìã [View Full Allure Report](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/)
            - üîÑ [GitHub Action Run](https://${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            ${historyInfo ? `- üìà [Historical Trends](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/#/graph)` : ''}
            
            ---
            *Report generated by GitHub Actions*`;
            
                  await github.rest.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: body
                  });
                  
                  console.log('‚úÖ PR comment created with detailed test results');
                  return;
                }
              }
              
              // Fallback comment if detailed stats not available
              const fallbackBody = `## ${status} Selenium Test Results - Build #${{ github.run_number }}
            
            ${summary}
            
            üîó [View Action](https://${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: fallbackBody
              });
              
              console.log('‚úÖ PR comment created with basic results');
              
            } catch (error) {
              console.log('‚ùå Could not create PR comment:', error.message);
            }
