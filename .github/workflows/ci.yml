name: Selenium Tests with Complete Allure History

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test-and-report:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Set up Java
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      # 3. Install Chrome & ChromeDriver
      - name: Install Chrome & ChromeDriver
        run: |
          sudo apt-get update
          sudo apt-get install -y chromium-browser chromium-chromedriver

      # 4. Download previous Allure history from gh-pages
      - name: Download Allure History
        run: |
          echo "=== Downloading previous Allure history ==="
          mkdir -p allure-history
          
          # Try to download history from gh-pages branch
          if git ls-remote --heads origin gh-pages | grep -q gh-pages; then
            echo "gh-pages branch exists, downloading history..."
            git fetch origin gh-pages:gh-pages 2>/dev/null || true
            git checkout gh-pages -- history 2>/dev/null || {
              echo "No history directory in gh-pages branch"
              mkdir -p history
            }
            git checkout main 2>/dev/null || git checkout ${{ github.ref_name }}
            
            # Copy history if it exists
            if [ -d "history" ]; then
              cp -r history/* allure-history/ 2>/dev/null || echo "No history files to copy"
              echo "Previous history restored:"
              ls -la allure-history/ || echo "No files in allure-history"
            else
              echo "No history directory found, starting fresh"
            fi
          else
            echo "No gh-pages branch exists yet, starting fresh"
          fi

      # 5. Prepare Allure directories with history
      - name: Setup Allure Directories
        run: |
          echo "=== Setting up Allure directories ==="
          mkdir -p target/allure-results/history
          
          # Copy existing history to results directory
          if [ -d "allure-history" ] && [ "$(ls -A allure-history)" ]; then
            cp -r allure-history/* target/allure-results/history/ 2>/dev/null || true
            echo "History files copied to results:"
            ls -la target/allure-results/history/ || echo "No history files"
          else
            echo "No previous history found"
          fi
          
          # Create environment.properties
          cat > target/allure-results/environment.properties << EOF
          Browser=Chrome
          Environment=GitHub Actions
          OS=Ubuntu Latest
          Build.Number=${{ github.run_number }}
          Build.Url=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          Branch=${{ github.ref_name }}
          Commit=${{ github.sha }}
          Timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          EOF
          
          # Create executor.json
          cat > target/allure-results/executor.json << EOF
          {
            "name": "GitHub Actions",
            "type": "github",
            "url": "${{ github.server_url }}/${{ github.repository }}",
            "buildOrder": ${{ github.run_number }},
            "buildName": "Build #${{ github.run_number }}",
            "buildUrl": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "reportName": "Allure Report #${{ github.run_number }}",
            "reportUrl": "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
          }
          EOF

      # 6. Run Maven tests
      - name: Run Tests
        run: |
          echo "=== Running Maven Tests ==="
          mvn clean test -Dmaven.test.failure.ignore=true
          
          echo "=== Test Results Generated ==="
          ls -la target/allure-results/

      # 7. Install Allure CLI and jq
      - name: Install Allure CLI
        run: |
          # Install Allure
          ALLURE_VERSION=2.25.0
          echo "Installing Allure CLI version $ALLURE_VERSION"
          wget -q https://github.com/allure-framework/allure2/releases/download/$ALLURE_VERSION/allure-$ALLURE_VERSION.tgz
          tar -zxf allure-$ALLURE_VERSION.tgz -C $HOME/
          echo "$HOME/allure-$ALLURE_VERSION/bin" >> $GITHUB_PATH
          
          # Install jq for JSON processing
          sudo apt-get install -y jq

      # 8. Generate Allure Report (with error handling)
      - name: Generate Allure Report
        run: |
          echo "=== Generating Allure Report ==="
          
          # Check if we have test results
          if [ ! -d "target/allure-results" ] || [ -z "$(ls -A target/allure-results/*.json 2>/dev/null)" ]; then
            echo "⚠️ No test results found, creating minimal report"
            mkdir -p target/allure-results
            mkdir -p target/allure-report
            
            # Create a minimal index.html for the report
            cat > target/allure-report/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head><title>No Tests Found</title></head>
          <body>
            <h1>No test results found</h1>
            <p>The test execution may have failed or no tests were executed.</p>
          </body>
          </html>
          EOF
            echo "Minimal report created"
            exit 0
          fi
          
          # Generate the report
          if allure generate target/allure-results --clean -o target/allure-report; then
            echo "✅ Allure report generated successfully"
          else
            echo "❌ Allure report generation failed, creating fallback"
            mkdir -p target/allure-report
            cat > target/allure-report/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head><title>Report Generation Failed</title></head>
          <body>
            <h1>Report generation failed</h1>
            <p>There was an error generating the Allure report.</p>
          </body>
          </html>
          EOF
          fi
          
          echo "=== Verifying generated report ==="
          if [ -f "target/allure-report/index.html" ]; then
            echo "✅ Report generated at target/allure-report/"
            ls -la target/allure-report/
            
            if [ -f "target/allure-report/history/history-trend.json" ]; then
              HISTORY_COUNT=$(jq length target/allure-report/history/history-trend.json 2>/dev/null || echo "0")
              echo "✅ History generated with $HISTORY_COUNT entries"
              
              if [ "$HISTORY_COUNT" -gt 0 ]; then
                echo "Build numbers in history:"
                jq -r '.[] | "Build #" + (.buildOrder // "unknown" | tostring) + " - " + (.reportName // "Unknown")' target/allure-report/history/history-trend.json 2>/dev/null || echo "Could not parse history entries"
              fi
            else
              echo "⚠️ No history-trend.json generated"
            fi
          else
            echo "❌ No report index.html found"
          fi

      # 9. Fix history metadata (ensure buildOrder is properly set)
      - name: Fix History Metadata
        run: |
          echo "=== Fixing history metadata ==="
          BUILD_ORDER=${{ github.run_number }}
          REPORT_NAME="Build #$BUILD_ORDER"
          REPORT_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
          
          # Fix history files that might have missing buildOrder
          for file in target/allure-report/history/*.json; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              echo "Processing $filename..."
              
              # Fix entries with missing or null buildOrder
              jq --argjson buildOrder "$BUILD_ORDER" \
                 --arg reportName "$REPORT_NAME" \
                 --arg reportUrl "$REPORT_URL" \
                 'map(if (.buildOrder == null or .buildOrder == "" or .buildOrder == "null") and (.data != null) then
                      . + {buildOrder: $buildOrder, reportName: $reportName, reportUrl: $reportUrl}
                    else . end)' \
                 "$file" > "temp_$filename"
              
              # Only replace if the temp file is valid JSON
              if jq empty "temp_$filename" 2>/dev/null; then
                mv "temp_$filename" "$file"
                echo "✅ Fixed $filename"
              else
                rm -f "temp_$filename"
                echo "⚠️ Could not fix $filename, keeping original"
              fi
            fi
          done
          
          echo "=== Final history verification ==="
          if [ -f "target/allure-report/history/history-trend.json" ]; then
            echo "Final history entries:"
            jq -r '.[] | "Build #" + (.buildOrder // "?" | tostring) + " (" + (.data.total // 0 | tostring) + " tests)"' target/allure-report/history/history-trend.json
          fi

      # 10. Backup history for next run
      - name: Prepare History for Next Run
        run: |
          echo "=== Preparing history for preservation ==="
          mkdir -p history
          
          # Copy current history to preservation directory
          if [ -d "target/allure-report/history" ]; then
            cp -r target/allure-report/history/* history/ 2>/dev/null || true
            echo "History backed up:"
            ls -la history/
            
            # Verify the backup
            for file in history/*.json; do
              if [ -f "$file" ]; then
                entries=$(jq length "$file" 2>/dev/null || echo "0")
                echo "$(basename $file): $entries entries"
              fi
            done
          else
            echo "No history to backup"
          fi

      # 11. Deploy to GitHub Pages (preserving history directory)
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: target/allure-report
          keep_files: false
          force_orphan: false
          
      # 12. Preserve history in gh-pages branch
      - name: Preserve History in gh-pages
        if: always()
        run: |
          echo "=== Preserving history in gh-pages branch ==="
          
          # Store current branch
          CURRENT_BRANCH="${{ github.ref_name }}"
          echo "Current branch: $CURRENT_BRANCH"
          
          # Configure git
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # Check if we have history to preserve
          if [ ! -d "history" ] || [ -z "$(ls -A history 2>/dev/null)" ]; then
            echo "No history to preserve, skipping"
            exit 0
          fi
          
          # Switch to gh-pages and add history directory
          git fetch origin gh-pages:gh-pages 2>/dev/null || echo "No existing gh-pages branch"
          
          # Try to checkout gh-pages
          if git checkout gh-pages 2>/dev/null; then
            echo "Checked out gh-pages branch"
            
            # Ensure history directory exists and copy current history
            if [ -d "history" ]; then
              echo "Updating existing history directory"
            else
              echo "Creating new history directory"
              mkdir -p history
            fi
            
            # Copy from our backup (use absolute path to avoid confusion)
            WORKSPACE_DIR=$(pwd)
            if [ -d "${WORKSPACE_DIR}/history" ]; then
              cp -r "${WORKSPACE_DIR}/history"/* history/ 2>/dev/null || echo "No history files to copy"
            fi
            
            # Commit history if there are changes
            git add history/ 2>/dev/null || true
            if git diff --staged --quiet; then
              echo "No history changes to commit"
            else
              git commit -m "Update Allure history for build #${{ github.run_number }}" || echo "Commit failed"
              git push origin gh-pages || echo "Push failed"
            fi
            
            # Switch back to original branch with better error handling
            git checkout "$CURRENT_BRANCH" 2>/dev/null || {
              echo "Failed to checkout $CURRENT_BRANCH, trying alternatives"
              git checkout main 2>/dev/null || {
                git checkout master 2>/dev/null || {
                  echo "Could not return to original branch, staying on gh-pages"
                }
              }
            }
          else
            echo "Could not checkout gh-pages branch, it might not exist yet"
          fi

      # 13. Deploy to SLT Server (only if report exists)
      - name: Deploy to SLT Server
        if: always()
        run: |
          if [ -d "target/allure-report" ] && [ -n "${{ secrets.SLT_HOST }}" ]; then
            echo "Deploying to SLT server..."
          else
            echo "Skipping SLT deployment - either report missing or SLT_HOST not configured"
            exit 0
          fi
        
      - name: Execute SLT Deployment
        if: always()
        uses: burnett01/rsync-deployments@6.0.0
        continue-on-error: true
        with:
          switches: -avzr --delete --exclude='.git*' --exclude='*.log'
          path: target/allure-report/
          remote_path: /var/www/html/selenium-report
          remote_host: ${{ secrets.SLT_HOST }}
          remote_user: ${{ secrets.SLT_USER }}
          remote_key: ${{ secrets.SSH_PRIVATE_KEY }}

      # 14. Upload Artifacts
      - name: Upload Allure Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-report-build-${{ github.run_number }}
          path: target/allure-report
          retention-days: 30
          
      - name: Upload History Backup
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-history-build-${{ github.run_number }}
          path: history
          retention-days: 90

      # 15. Generate Status Report
      - name: Generate Status Report
        if: always()
        run: |
          echo "=== ALLURE HISTORY STATUS REPORT ==="
          echo "Build Number: ${{ github.run_number }}"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Timestamp: $(date -u)"
          echo ""
          
          if [ -f "target/allure-report/history/history-trend.json" ]; then
            TOTAL_ENTRIES=$(jq length target/allure-report/history/history-trend.json)
            echo "✅ History entries: $TOTAL_ENTRIES"
            
            if [ "$TOTAL_ENTRIES" -gt 1 ]; then
              echo "✅ Historical data available!"
              echo ""
              echo "Build history:"
              jq -r '.[] | "Build #" + (.buildOrder // "?" | tostring) + 
                     " | Tests: " + (.data.total // 0 | tostring) + 
                     " | Passed: " + (.data.passed // 0 | tostring) + 
                     " | Failed: " + (.data.failed // 0 | tostring)' \
                     target/allure-report/history/history-trend.json | tail -10
            else
              echo "⚠️ Only current build in history (first run or history not preserved)"
            fi
          else
            echo "❌ No history data found"
          fi
          
          echo ""
          echo "=== CURRENT BUILD RESULTS ==="
          if [ -f "target/allure-report/widgets/summary.json" ]; then
            jq -r '"📊 Total: " + (.statistic.total | tostring) + 
                   " | ✅ Passed: " + (.statistic.passed | tostring) + 
                   " | ❌ Failed: " + (.statistic.failed | tostring) + 
                   " | ⏭️ Skipped: " + (.statistic.skipped | tostring) + 
                   " | 🕒 Duration: " + ((.time.duration // 0) / 1000 | floor | tostring) + "s"' \
                   target/allure-report/widgets/summary.json
          fi
          
          echo ""
          echo "🔗 Report: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
          echo "🔗 Action: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

      # 16. Comment on PR with results
      - name: Comment PR with Test Results
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request' && always()
        with:
          script: |
            const fs = require('fs');
            
            try {
              const summaryPath = 'target/allure-report/widgets/summary.json';
              
              if (fs.existsSync(summaryPath)) {
                const summary = JSON.parse(fs.readFileSync(summaryPath, 'utf8'));
                
                // Check for history
                let historyInfo = '';
                const historyPath = 'target/allure-report/history/history-trend.json';
                if (fs.existsSync(historyPath)) {
                  const history = JSON.parse(fs.readFileSync(historyPath, 'utf8'));
                  historyInfo = `📈 Historical builds: ${history.length}`;
                } else {
                  historyInfo = '📈 First build (no history yet)';
                }
                
                const passed = summary.statistic.passed || 0;
                const failed = summary.statistic.failed || 0;
                const skipped = summary.statistic.skipped || 0;
                const total = summary.statistic.total || 0;
                const duration = Math.round((summary.time.duration || 0) / 1000);
                
                const status = failed > 0 ? '❌' : '✅';
                
                const body = `## ${status} Test Results - Build #${{ github.run_number }}
            
            | Status | Count |
            |--------|-------|
            | ✅ Passed | ${passed} |
            | ❌ Failed | ${failed} |
            | ⏭️ Skipped | ${skipped} |
            | **📊 Total** | **${total}** |
            
            🕒 Duration: ${duration}s  
            ${historyInfo}
            
            📋 [View Full Report](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/)`;
            
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: body
                });
              }
            } catch (error) {
              console.log('Could not create PR comment:', error.message);
            }
